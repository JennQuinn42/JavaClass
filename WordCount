package exam;

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * @author JennQuinn
 *
 */
public class WordPanel extends JPanel {

	private static final long serialVersionUID = 1L;
	private JTextField txtWord;
	private JTextField txtStatus;
	private JTextField txtNumWords;
	private JTextField txtSpaces;
	private JTextField txtNoSpaces;
	private JTextField txtParagraphs;

	/**
	 * Create the panel.
	 */
	public WordPanel() {
		setBackground(Color.LIGHT_GRAY);
		setLayout(null);

		JLabel lblEnterText = new JLabel("Enter text");
		lblEnterText.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblEnterText.setBounds(105, 22, 103, 14);
		add(lblEnterText);

		JTextArea txtText = new JTextArea();
		txtText.setAutoscrolls(false);
		txtText.setLineWrap(true);
		txtText.setBounds(10, 48, 321, 152);
		add(txtText);

		JLabel lblEnterWord = new JLabel("Enter word");
		lblEnterWord.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblEnterWord.setBounds(341, 51, 86, 14);
		add(lblEnterWord);

		txtWord = new JTextField();
		txtWord.setBounds(341, 76, 209, 20);
		add(txtWord);
		txtWord.setColumns(10);

		JLabel lblStatus = new JLabel("Status");
		lblStatus.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblStatus.setBounds(341, 110, 53, 14);
		add(lblStatus);

		txtStatus = new JTextField();
		txtStatus.setEditable(false);
		txtStatus.setBackground(Color.LIGHT_GRAY);
		txtStatus.setBounds(341, 135, 209, 20);
		add(txtStatus);
		txtStatus.setColumns(10);

		JButton btnFindWord = new JButton("Find Word");
		btnFindWord.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(txtText.getText() != "")
				{
					//Initialize highlighting
					Highlighter highlight = txtText.getHighlighter();
					HighlightPainter paint = new DefaultHighlighter.DefaultHighlightPainter(Color.BLUE);

					String word = txtWord.getText();
					String text = txtText.getText();

					int position = -1;

					if(word != "")
					{
						//remove previous highlighting
						highlight.removeAllHighlights();
						
						//look for the word in the text
						position = text.indexOf(word);

						if(position > -1)
						{
							txtStatus.setForeground(Color.BLUE);
							txtStatus.setText("Word found at: " + position);
							int highlightLength = position + word.length();
							try {
								highlight.addHighlight(position, highlightLength, paint);
							} catch (BadLocationException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}//end if word is found
						else
						{
							txtStatus.setForeground(Color.RED);
							txtStatus.setText("Word not found");
						}//end word not found
					}//end if there is a word to search for
				}//end if text area is not empty
			}//end do something when the button is clicked
		});
		btnFindWord.setBackground(Color.LIGHT_GRAY);
		btnFindWord.setBounds(341, 166, 98, 23);
		add(btnFindWord);

		JButton btnClear = new JButton("Clear");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				txtText.setText("");
				txtWord.setText("");
				txtStatus.setText("");
				txtParagraphs.setText("");
				txtNumWords.setText("");
				txtSpaces.setText("");
				txtNoSpaces.setText("");
			}//end clear all text fields
		});
		btnClear.setBackground(Color.LIGHT_GRAY);
		btnClear.setBounds(452, 166, 98, 23);
		add(btnClear);

		JLabel lblCountOfWords = new JLabel("Count of words and characters");
		lblCountOfWords.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblCountOfWords.setBounds(53, 210, 222, 14);
		add(lblCountOfWords);

		JLabel lblNumberOfWords = new JLabel("Number of words");
		lblNumberOfWords.setBounds(10, 235, 225, 14);
		add(lblNumberOfWords);

		JLabel lblNumberOfCharacters = new JLabel("Number of characters including spaces");
		lblNumberOfCharacters.setBounds(10, 260, 225, 14);
		add(lblNumberOfCharacters);

		JLabel lblNumberOfCharacters_1 = new JLabel("Number of characters without spaces");
		lblNumberOfCharacters_1.setBounds(10, 288, 225, 14);
		add(lblNumberOfCharacters_1);

		JLabel lblNumberOfParagraphs = new JLabel("Number of paragraphs");
		lblNumberOfParagraphs.setBounds(10, 313, 225, 14);
		add(lblNumberOfParagraphs);

		txtNumWords = new JTextField();
		txtNumWords.setBackground(Color.LIGHT_GRAY);
		txtNumWords.setEditable(false);
		txtNumWords.setBounds(245, 232, 86, 20);
		add(txtNumWords);
		txtNumWords.setColumns(10);

		txtSpaces = new JTextField();
		txtSpaces.setEditable(false);
		txtSpaces.setBackground(Color.LIGHT_GRAY);
		txtSpaces.setBounds(245, 257, 86, 20);
		add(txtSpaces);
		txtSpaces.setColumns(10);

		txtNoSpaces = new JTextField();
		txtNoSpaces.setBackground(Color.LIGHT_GRAY);
		txtNoSpaces.setEditable(false);
		txtNoSpaces.setBounds(245, 282, 86, 20);
		add(txtNoSpaces);
		txtNoSpaces.setColumns(10);

		txtParagraphs = new JTextField();
		txtParagraphs.setBackground(Color.LIGHT_GRAY);
		txtParagraphs.setEditable(false);
		txtParagraphs.setBounds(245, 310, 86, 20);
		add(txtParagraphs);
		txtParagraphs.setColumns(10);

		JButton btnWordCount = new JButton("Word Count");
		btnWordCount.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(txtText.getText() != "")
				{
					String text = txtText.getText();
					int numWords = 0;
					int lengthWithSpaces = 0;
					int numSpaces = 0;
					int numParagraphs = 0;
					int numTabs = 0;

					lengthWithSpaces = text.length();

					for(int i = 0; i < text.length(); ++i)
					{
						if(text.charAt(i) == 9)
						{
							numTabs++;
						}//end count the number of tabs
						if(text.charAt(i) == 9 && (text.charAt(i - 1) == ' ' || text.charAt(i + 1) == ' '))
						{
							numTabs--;
						}//end don't double count spaces if a they surround a space
						if(text.charAt(i) == ' ')
						{
							numSpaces++;
						}//end count the spaces
						if(text.charAt(i) == '\n')
						{
							numParagraphs++;
						}//end count the carriage returns
					}//end go through the text

					if(text.charAt((text.length() -1)) != '\n')
					{
						numParagraphs++;
					}//end include the last paragraph if the text doesn't end in carriage return

					//count the words by adding the number of spaces and the number of carriage returns
					numWords = numParagraphs + numSpaces + numTabs;

					//I am removing the carriage return from the count of all characters as most users do not consider them characters
					lengthWithSpaces -= numParagraphs;

					txtNumWords.setText("" + numWords);
					txtSpaces.setText("" + lengthWithSpaces);
					txtNoSpaces.setText("" + (lengthWithSpaces - numSpaces));
					txtParagraphs.setText("" + numParagraphs);
				}//end if the text area is not empty
			}//end calculate paragraphs, words, and characters
		});
		btnWordCount.setBackground(Color.LIGHT_GRAY);
		btnWordCount.setBounds(385, 256, 119, 23);
		add(btnWordCount);

	}
}


//second class
package exam;

import javax.swing.JApplet;

/**
 * @author JennQuinn
 *
 */
public class WordCount extends JApplet {

	private static final long serialVersionUID = 1L;
	
	// Give my panel to the Applet for displaying
	public WordCount() {
		this.setContentPane(new WordPanel());
	}//end no-args constructor

	public void init(){
		this.setSize(600, 400);
	}//end overridden init
	
}//end JApplet
